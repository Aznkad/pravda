import { Proof } from "./Proof.js";

export function stringToLaTeX(s: string) {
    return (" " + s + " ")
        .replace(/\(/g, " ( ")
        .replace(/\)/g, " ) ")
        .replace(/ and /g, " \\wedge ")
        .replace(/ or /g, " \\vee ")
        .replace(/ -> /g, " \\rightarrow ")
        .replace(/ not /g, " \\neg ")
        .replace(/ forall /g, " \\forall ")
        .replace(/ exists /g, " \\exists ")
        .replace(/ \|- /g, " \\vdash ")
        .replace(/ bottom /g, " \\bot ")
        .replace(/ top /g, " \\top ");
}




export function proofToProofTreeLaTeX(proof: Proof) {

    const alreadyUsed = [];

    function proofToProofTreeLaTeXOf(i: number) {
        alreadyUsed[i] = true;
        if (proof.justifications[i].type == "issue")
            throw "ERROR";
        else if (proof.justifications[i].type == "input")
            return stringToLaTeX(proof.lines[i]);
        else
            return "\\dfrac{" +
                (<any>proof.justifications[i]).previous.map((j) => proofToProofTreeLaTeXOf(j)).join("~~~~~") + "}" +
                "{" + stringToLaTeX(proof.lines[i]) + "}\\rulename{" + proof.justifications[i].msg + "}";
    }

    function getEndProof() {
        for (let i = proof.lines.length - 1; i--; i >= 0) {
            if (proof.justifications[i] && (!alreadyUsed[i]))
                return i;
        }
        return -1;
    }

    try {
        let s = "\\newcommand{\\rulename}[1]{\\textcolor{green}{\\text{#1}}}";
        while(getEndProof() >= 0) {
            if(s != "")
                s += "~~~~~~";
            s += proofToProofTreeLaTeXOf(getEndProof());
        }
        return s;
    }
    catch(e) {
        return "";
    }
    



}


let alreadyAsked: boolean = false;

const delayMathJAX = 500;

/**
 * update the pictures generated by LaTEX
 */
export function askForMathJAX() {
    if (alreadyAsked) return;
    alreadyAsked = true;
    setTimeout(() => {
        alreadyAsked = false;
        eval("MathJax.texReset(); MathJax.typesetClear();MathJax.typeset()");
    }
        , delayMathJAX);
}